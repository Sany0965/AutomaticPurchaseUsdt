import telebot
import threading
import requests
import logging
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from yoomoney import Quickpay, Client
from datetime import datetime, timedelta
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "—Ç–æ–∫–µ–Ω –±–æ—Ç–∞"
YOOMONEY_TOKEN = "—Ç–æ–∫–µ–Ω —é–º–∞–Ω–∏"
CRYPTOBOT_KEY = "—Ç–æ–∫–µ–Ω –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–æ–≤, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ–∫–æ–≤ —á–µ–∫–∫—Ä–µ–∞—Ç–µ"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á Cryptobot
RECEIVER = "–Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞"
EXCHANGERATESAPI_KEY = ""  # –ö–ª—é—á –æ—Ç Exchange Rates API
COMMISSION = 0.08           # 8% –∫–æ–º–∏—Å—Å–∏—è
MINIMUM_AMOUNT_USD = 0.1    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —á–µ–∫–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
MINIMUM_AMOUNT_RUB = 10     # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —á–µ–∫–∞ –≤ —Ä—É–±–ª—è—Ö

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}
pending_payments = {}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB
def get_usd_to_rub_rate():
    url = f"http://api.exchangeratesapi.io/v1/latest?access_key={EXCHANGERATESAPI_KEY}&symbols=USD,RUB"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if data.get("success", False):
            usd_rate = data["rates"]["USD"]
            rub_rate = data["rates"]["RUB"]
            return rub_rate / usd_rate  # –ö—É—Ä—Å RUB/USD
    return None

# –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def main_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üíµ –í–≤–µ—Å—Ç–∏ —Å—É–º–º—É", callback_data="enter_amount"))
    return keyboard

def confirm_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_yes"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_no")
    )
    return keyboard

def payment_keyboard(payment_url):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url),
        InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ /start –∏ /help
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ Cryptobot. –ñ–º–∏ /help, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ.",
        reply_markup=main_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")

@bot.message_handler(commands=["help"])
def help(message):
    bot.send_message(
        message.chat.id,
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–µ–∫–∏ Cryptobot. –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, "
        "–∏ –±–æ—Ç —Å–æ–∑–¥–∞—Å—Ç —Å—á–µ—Ç –≤ –Æ–º–∞–Ω–∏. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, —á–µ—Ä–µ–∑ Cryptobot API, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —á–µ–∫.\n\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —á–µ–∫–∞: 0.1$ –∏–ª–∏ 10‚ÇΩ."
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@bot.callback_query_handler(func=lambda call: call.data == "enter_amount")
def enter_amount(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):")
    bot.register_next_step_handler(call.message, process_amount)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.chat.id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ —Å—É–º–º—ã.")

def process_amount(message):
    try:
        amount_usd = float(message.text)
        if amount_usd < MINIMUM_AMOUNT_USD:
            bot.send_message(message.chat.id, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —á–µ–∫–∞: {MINIMUM_AMOUNT_USD}$.")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤–µ–ª —Å—É–º–º—É –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π: {amount_usd}$.")
            return

        rate = get_usd_to_rub_rate()
        if not rate:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.")
            return

        amount_rub = amount_usd * rate * (1 + COMMISSION)
        if amount_rub < MINIMUM_AMOUNT_RUB:
            bot.send_message(message.chat.id, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —á–µ–∫–∞: {MINIMUM_AMOUNT_RUB}‚ÇΩ.")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤–µ–ª —Å—É–º–º—É –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π: {amount_rub}‚ÇΩ.")
            return

        user_data[message.chat.id] = {
            "amount_usd": amount_usd,
            "amount_rub": amount_rub,
            "rate": rate
        }

        bot.send_message(
            message.chat.id,
            f"–í—ã —Ö–æ—Ç–∏—Ç–µ —á–µ–∫ –Ω–∞ {amount_usd}$? –≠—Ç–æ –±—É–¥–µ—Ç {amount_rub:.2f}‚ÇΩ (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ 8%). –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
            reply_markup=confirm_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å—É–º–º—É: {amount_usd}$ ({amount_rub}‚ÇΩ).")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5).")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: call.data in ["confirm_yes", "confirm_no"])
def confirm(call):
    if call.data == "confirm_no":
        bot.send_message(call.message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.chat.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é.")
        return

    user_id = call.message.chat.id
    if user_id not in user_data:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        logger.error(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    amount_rub = user_data[user_id]["amount_rub"]
    label = f"user_{user_id}_{datetime.now().timestamp()}"

    quickpay = Quickpay(
        receiver=RECEIVER,
        quickpay_form="shop",
        targets="–û–ø–ª–∞—Ç–∞ —á–µ–∫–∞ Cryptobot",
        paymentType="SB",
        sum=amount_rub,
        label=label
    )

    pending_payments[user_id] = {
        "label": label,
        "amount_usd": user_data[user_id]["amount_usd"],
        "expiry_time": datetime.now() + timedelta(minutes=10)
    }

    bot.send_message(
        user_id,
        f"–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç {amount_rub:.2f}‚ÇΩ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞ Cryptobot –Ω–∞ {user_data[user_id]['amount_usd']}$.",
        reply_markup=payment_keyboard(quickpay.base_url)
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–ª —Å—á–µ—Ç –Ω–∞ {amount_rub}‚ÇΩ.")

    # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
    threading.Timer(600, delete_pending_payment, args=[user_id]).start()

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
def delete_pending_payment(user_id):
    if user_id in pending_payments:
        del pending_payments[user_id]
        bot.send_message(user_id, "–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç. –û–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        logger.info(f"–°—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.")

def create_crypto_check(asset, amount, user_id=None):
    url = "https://pay.crypt.bot/api/createCheck"  # –¢–µ—Å—Ç–æ–≤—ã–π URL
    headers = {
        "Crypto-Pay-API-Token": CRYPTOBOT_KEY,
        "Content-Type": "application/json"
    }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É –≤ —Å—Ç—Ä–æ–∫—É —Å 6 –∑–Ω–∞–∫–∞–º–∏ –¥–ª—è USDT (1e6)
    amount_str = f"{amount:.6f}".rstrip('0').rstrip('.') if '.' in f"{amount:.6f}" else f"{amount:.6f}"
    
    payload = {
        "asset": asset,
        "amount": amount_str,
        "user_id": user_id
    }
    
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        result = response.json()
        logger.info(f"–û—Ç–≤–µ—Ç Cryptobot API: {result}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
        
        if not result.get("ok"):
            logger.error(f"–û—à–∏–±–∫–∞ Cryptobot: {result.get('error')}")
            return None
            
        check_data = result.get("result", {})
        if "check_id" not in check_data or "bot_check_url" not in check_data:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º bot_check_url
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Cryptobot: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è")
            return None
            
        logger.info(f"–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å—É–º–º—É {amount} {asset}.")
        return result
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {str(e)}")
        return None

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data == "check_payment")
def check_payment(call):
    user_id = call.message.chat.id
    if user_id not in pending_payments:
        bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–ø–ª–∞—Ç—É.")
        return

    label = pending_payments[user_id]["label"]
    client = Client(YOOMONEY_TOKEN)
    history = client.operation_history(label=label)

    for operation in history.operations:
        if operation.status == "success":
            payment_time = datetime.now()
            # –°–æ–∑–¥–∞–µ–º —á–µ–∫ —á–µ—Ä–µ–∑ Cryptobot API
            asset = "USDT"  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤
            amount = pending_payments[user_id]["amount_usd"]
            crypto_check = create_crypto_check(asset, amount, user_id=user_id)
            
            if crypto_check and crypto_check.get("result"):
                check_data = crypto_check["result"]
                bot.send_message(
                    user_id,
                    f"‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–°—É–º–º–∞: {amount} {asset}\n"
                    f"ID —á–µ–∫–∞: {check_data['check_id']}\n"
                    f"–°—Å—ã–ª–∫–∞: {check_data['bot_check_url']}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot_check_url –≤–º–µ—Å—Ç–æ url
                )
            else:
                bot.send_message(
                    user_id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            
            del pending_payments[user_id]
            return

    bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    logger.warning(f"–û–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.polling(none_stop=True)
